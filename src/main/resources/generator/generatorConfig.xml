<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    注意，两个属性只能选址一个;
    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
<properties resource="" url="" />
 -->
    <!-- 引入数据库连接配置 -->
    <properties resource="jdbc.properties"/>
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="ORACLE" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value=""/>
        <property name="endingDelimiter" value=""/>

        <!-- 配置 tk.mybatis 插件 -->
    <!--    <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.MyMapper"/>
        </plugin>-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>

        <!-- 自动为entity生成swagger2文档-->
        <!--<plugin type="mybatis.generator.plugins.GeneratorSwagger2Doc">
            <property name="apiModelAnnotationPackage" value="io.swagger.annotations.ApiModel" />
            <property name="apiModelPropertyAnnotationPackage" value="io.swagger.annotations.ApiModelProperty" />
        </plugin>-->
        <!-- 扩展entity的set方法,返回当前this实例，方便链式调用-->
        <!--<plugin type="mybatis.generator.plugins.ExtendEntitySetter" />-->

        <!-- 配置数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.username}"
                password="${jdbc.password}">
        </jdbcConnection>
        <!--
      默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
          true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal
      -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
        <!-- java模型创建器，是必须要的元素
                负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
                targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
                targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
             -->
        <!-- 配置实体类存放路径 -->
        <javaModelGenerator targetPackage="com.example.demo.entity" targetProject="src/main/java"/>

        <!-- 配置 XML 存放路径 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>

        <!-- 配置 DAO 存放路径 -->
        <javaClientGenerator
                targetPackage="com.example.demo.mapper"
                targetProject="src/main/java"
                type="XMLMAPPER"/>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
       选择的table会生成一下文件：
       1，SQL map文件
       2，生成一个主键类；
       3，除了BLOB和主键的其他字段的类；
       4，包含BLOB的类；
       5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
       6，Mapper接口（可选）
       tableName（必要）：要生成对象的表名；
       注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
           根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
           1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
           2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
           3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
           4，否则，使用指定的大小写格式查询；
       另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
       这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；
       可选：
       1，schema：数据库的schema；
       2，catalog：数据库的catalog；
       3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
       4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
       5，enableInsert（默认true）：指定是否生成insert语句；
       6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
       7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
       8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
       9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
       10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
       11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
       12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
       13，modelType：参考context元素的defaultModelType，相当于覆盖；
       14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
       15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
       注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
    -->
        <!-- 配置需要指定生成的数据库和表，% 代表所有表 -->
        <table tableName="T_CT_USER_MENU"
               enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false" >
            <!-- mysql 配置 -->
            <!--<generatedKey column="id" sqlStatement="Mysql" identity="true"/>-->
        </table>
    </context>
</generatorConfiguration>